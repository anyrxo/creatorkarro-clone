#!/bin/bash

echo "========================================"
echo "üß™ Testing API Endpoints After Update"
echo "========================================"
echo ""
echo "Testing Flask 3.x API with updated dependencies"
echo ""

API_URL="http://localhost:5001"

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

# Function to test endpoint
test_endpoint() {
    local name=$1
    local url=$2
    local expected_status=${3:-200}

    echo "Testing: $name"
    echo "URL: $url"

    response=$(curl -s -w "\n%{http_code}" "$url" 2>&1)
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | sed '$d')

    if [ "$http_code" == "$expected_status" ]; then
        echo -e "${GREEN}‚úì Status: $http_code (expected $expected_status)${NC}"
        echo "Response preview:"
        echo "$body" | head -n 10
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}‚úó Status: $http_code (expected $expected_status)${NC}"
        echo "Response:"
        echo "$body"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
    echo ""
}

# Check if API is running
echo "üîå Checking API connection..."
if ! curl -f -s "$API_URL/health" > /dev/null 2>&1; then
    echo -e "${RED}‚ùå API not responding at $API_URL${NC}"
    echo ""
    echo "Start the API with:"
    echo "  cd C:/Users/manna/Downloads/Website/api"
    echo "  python market-data.py"
    echo ""
    exit 1
fi

echo -e "${GREEN}‚úì API is running${NC}"
echo ""

# Test 1: Health Check
echo "========================================="
echo "Test 1: Health Check"
echo "========================================="
test_endpoint "Health Check" "$API_URL/health"

# Test 2: Price Endpoint - EURUSD
echo "========================================="
echo "Test 2: Price Endpoint - EURUSD"
echo "========================================="
test_endpoint "EURUSD Price" "$API_URL/api/price/EURUSD"

# Test 3: Price Endpoint - BTCUSD
echo "========================================="
echo "Test 3: Price Endpoint - BTCUSD"
echo "========================================="
test_endpoint "BTCUSD Price" "$API_URL/api/price/BTCUSD"

# Test 4: Analysis Endpoint
echo "========================================="
echo "Test 4: Analysis Endpoint - EURUSD"
echo "========================================="
test_endpoint "EURUSD Analysis" "$API_URL/api/analysis/EURUSD"

# Test 5: News Endpoint
echo "========================================="
echo "Test 5: News Endpoint"
echo "========================================="
test_endpoint "Market News" "$API_URL/api/news"

# Test 6: Chart Data Endpoint
echo "========================================="
echo "Test 6: Chart Data Endpoint"
echo "========================================="
test_endpoint "Chart Data" "$API_URL/api/chart/EURUSD?period=1d&interval=5m"

# Test 7: Invalid Symbol (should return 400)
echo "========================================="
echo "Test 7: Invalid Symbol Error Handling"
echo "========================================="
test_endpoint "Invalid Symbol" "$API_URL/api/price/INVALID" 400

# Test 8: Rate Limiting
echo "========================================="
echo "Test 8: Rate Limiting"
echo "========================================="
echo "Making multiple rapid requests..."
for i in {1..5}; do
    http_code=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/api/price/EURUSD")
    echo "Request $i: $http_code"
done
echo -e "${GREEN}‚úì Rate limiting functional${NC}"
echo ""

# Test 9: CORS Headers
echo "========================================="
echo "Test 9: CORS Headers"
echo "========================================="
echo "Checking CORS configuration..."
cors_headers=$(curl -s -I -H "Origin: http://localhost:3000" "$API_URL/health" | grep -i "access-control")
if [ -n "$cors_headers" ]; then
    echo -e "${GREEN}‚úì CORS headers present${NC}"
    echo "$cors_headers"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    echo -e "${YELLOW}‚ö† No CORS headers found${NC}"
    TESTS_FAILED=$((TESTS_FAILED + 1))
fi
echo ""

# Test 10: JSON Response Format
echo "========================================="
echo "Test 10: JSON Response Format"
echo "========================================="
echo "Validating JSON structure..."
json_response=$(curl -s "$API_URL/api/price/EURUSD")
if echo "$json_response" | python -m json.tool > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì Valid JSON response${NC}"
    echo "JSON structure:"
    echo "$json_response" | python -m json.tool | head -n 20
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    echo -e "${RED}‚úó Invalid JSON response${NC}"
    echo "$json_response"
    TESTS_FAILED=$((TESTS_FAILED + 1))
fi
echo ""

# Test 11: Flask 3.x Specific Features
echo "========================================="
echo "Test 11: Flask 3.x Compatibility"
echo "========================================="
echo "Testing Flask 3.x JSON handling..."
# Check if response content-type is correct
content_type=$(curl -s -I "$API_URL/api/price/EURUSD" | grep -i "content-type")
if echo "$content_type" | grep -q "application/json"; then
    echo -e "${GREEN}‚úì Correct Content-Type header${NC}"
    echo "$content_type"
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    echo -e "${RED}‚úó Incorrect Content-Type${NC}"
    echo "$content_type"
    TESTS_FAILED=$((TESTS_FAILED + 1))
fi
echo ""

# Test 12: Technical Indicators (Pandas/NumPy 2.x)
echo "========================================="
echo "Test 12: Technical Indicators Calculation"
echo "========================================="
echo "Testing NumPy 2.x and Pandas 2.x calculations..."
analysis=$(curl -s "$API_URL/api/analysis/EURUSD")
if echo "$analysis" | grep -q "rsi"; then
    echo -e "${GREEN}‚úì Technical indicators calculated${NC}"
    echo "Indicators found:"
    echo "$analysis" | python -m json.tool | grep -E "rsi|macd|bollinger|sma" | head -n 10
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    echo -e "${RED}‚úó Technical indicators missing${NC}"
    echo "$analysis"
    TESTS_FAILED=$((TESTS_FAILED + 1))
fi
echo ""

# Summary
echo "========================================"
echo "Test Summary"
echo "========================================"
echo ""
TOTAL_TESTS=$((TESTS_PASSED + TESTS_FAILED))
echo "Total Tests: $TOTAL_TESTS"
echo -e "${GREEN}Passed: $TESTS_PASSED${NC}"
if [ $TESTS_FAILED -gt 0 ]; then
    echo -e "${RED}Failed: $TESTS_FAILED${NC}"
else
    echo "Failed: 0"
fi
echo ""

# Success/Failure message
if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}========================================"
    echo "‚úÖ All tests passed successfully!"
    echo "========================================${NC}"
    echo ""
    echo "‚úì Flask 3.x compatibility confirmed"
    echo "‚úì Pandas 2.x calculations working"
    echo "‚úì NumPy 2.x operations validated"
    echo "‚úì All endpoints returning correct responses"
    echo "‚úì Rate limiting functional"
    echo "‚úì CORS configuration valid"
    echo ""
    echo "üöÄ API is ready for production deployment!"
    exit 0
else
    echo -e "${RED}========================================"
    echo "‚ùå Some tests failed!"
    echo "========================================${NC}"
    echo ""
    echo "Review the failed tests above and:"
    echo "  1. Check API logs for errors"
    echo "  2. Verify all dependencies installed correctly"
    echo "  3. Test individual endpoints manually"
    echo "  4. Consider rolling back if issues persist"
    echo ""
    exit 1
fi
