'use client'

import { useState, useEffect, useRef } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface AnimatedTextProps {\n  children: string\n  className?: string\n  animation?: 'fade' | 'slide' | 'reveal' | 'typewriter' | 'counter'\n  delay?: number\n  duration?: number\n  stagger?: number\n  countTo?: number\n  suffix?: string\n}\n\nexport default function AnimatedText({\n  children,\n  className,\n  animation = 'fade',\n  delay = 0,\n  duration = 1000,\n  stagger = 100,\n  countTo,\n  suffix = ''\n}: AnimatedTextProps) {\n  const [isVisible, setIsVisible] = useState(false)\n  const [currentCount, setCurrentCount] = useState(0)\n  const elementRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setTimeout(() => setIsVisible(true), delay)\n        }\n      },\n      { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }\n    )\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current)\n    }\n\n    return () => observer.disconnect()\n  }, [delay])\n\n  // Counter animation\n  useEffect(() => {\n    if (animation === 'counter' && isVisible && countTo) {\n      const startTime = Date.now()\n      const startValue = 0\n      const change = countTo - startValue\n\n      const animate = () => {\n        const elapsed = Date.now() - startTime\n        const progress = Math.min(elapsed / duration, 1)\n        \n        // Easing function (ease-out)\n        const easeOut = 1 - Math.pow(1 - progress, 3)\n        const currentValue = Math.floor(startValue + change * easeOut)\n        \n        setCurrentCount(currentValue)\n        \n        if (progress < 1) {\n          requestAnimationFrame(animate)\n        }\n      }\n      \n      animate()\n    }\n  }, [isVisible, countTo, duration, animation])\n\n  const renderTypewriter = () => {\n    if (!isVisible) return null\n    \n    return (\n      <span className={cn('typewriter', className)}>\n        {children}\n      </span>\n    )\n  }\n\n  const renderReveal = () => {\n    const words = children.split(' ')\n    \n    return (\n      <span className={cn('text-reveal', className)}>\n        {words.map((word, index) => (\n          <span\n            key={index}\n            className={cn(\n              'inline-block overflow-hidden',\n              {\n                'animate-[text-reveal_1.2s_cubic-bezier(0.77,0,0.175,1)_forwards]': isVisible\n              }\n            )}\n            style={{\n              animationDelay: `${index * stagger}ms`\n            }}\n          >\n            <span className=\"inline-block\">\n              {word}{index < words.length - 1 ? '\\u00A0' : ''}\n            </span>\n          </span>\n        ))}\n      </span>\n    )\n  }\n\n  const renderStaggered = () => {\n    const letters = children.split('')\n    \n    return (\n      <span className={className}>\n        {letters.map((letter, index) => (\n          <span\n            key={index}\n            className={cn(\n              'inline-block transition-all duration-700 ease-out',\n              'transform-gpu',\n              {\n                'translate-y-0 opacity-100': isVisible,\n                'translate-y-8 opacity-0': !isVisible,\n              }\n            )}\n            style={{\n              transitionDelay: `${delay + index * stagger}ms`\n            }}\n          >\n            {letter === ' ' ? '\\u00A0' : letter}\n          </span>\n        ))}\n      </span>\n    )\n  }\n\n  const renderCounter = () => {\n    return (\n      <span className={className}>\n        {currentCount.toLocaleString()}{suffix}\n      </span>\n    )\n  }\n\n  const renderBasic = () => {\n    return (\n      <span\n        className={cn(\n          'block transition-all duration-700 ease-out transform-gpu',\n          {\n            'translate-y-0 opacity-100': isVisible,\n            'translate-y-8 opacity-0': !isVisible,\n            'translate-x-0': animation === 'slide' && isVisible,\n            '-translate-x-8': animation === 'slide' && !isVisible,\n          },\n          className\n        )}\n        style={{\n          transitionDelay: `${delay}ms`\n        }}\n      >\n        {children}\n      </span>\n    )\n  }\n\n  return (\n    <div ref={elementRef} className=\"relative\">\n      {animation === 'typewriter' && renderTypewriter()}\n      {animation === 'reveal' && renderReveal()}\n      {animation === 'counter' && renderCounter()}\n      {(animation === 'fade' || animation === 'slide') && renderBasic()}\n      {!['typewriter', 'reveal', 'counter', 'fade', 'slide'].includes(animation) && renderStaggered()}\n    </div>\n  )\n}\n\n// Gradient text component\ninterface GradientTextProps {\n  children: React.ReactNode\n  className?: string\n  gradient?: 'primary' | 'secondary' | 'rainbow' | 'sunset'\n}\n\nexport function GradientText({ children, className, gradient = 'primary' }: GradientTextProps) {\n  const gradients = {\n    primary: 'from-blue-400 via-purple-500 to-pink-500',\n    secondary: 'from-green-400 to-blue-500',\n    rainbow: 'from-red-500 via-yellow-500 via-green-500 via-blue-500 to-purple-500',\n    sunset: 'from-orange-400 via-red-500 to-pink-500'\n  }\n\n  return (\n    <span className={cn(\n      'bg-gradient-to-r bg-clip-text text-transparent animated-gradient',\n      gradients[gradient],\n      className\n    )}>\n      {children}\n    </span>\n  )\n}\n\n// Glitch text component\ninterface GlitchTextProps {\n  children: string\n  className?: string\n}\n\nexport function GlitchText({ children, className }: GlitchTextProps) {\n  return (\n    <span className={cn('relative inline-block', className)}>\n      <span className=\"relative z-10\">{children}</span>\n      <span \n        className=\"absolute top-0 left-0 text-red-500 -z-10 glitch\"\n        aria-hidden=\"true\"\n      >\n        {children}\n      </span>\n      <span \n        className=\"absolute top-0 left-0 text-blue-500 -z-20 glitch\"\n        aria-hidden=\"true\"\n        style={{ animationDelay: '0.1s' }}\n      >\n        {children}\n      </span>\n    </span>\n  )\n}